Docker Commands ---------------------------------------------

Command to start the container orchestration process:
$ sudo docker-compose up

Stop the containers orchestration and delete the volumes:
$ sudo docker-compose down -v

List all containers available:
$ sudo docker ps -a

Create a Docker image from the AerariumBackend project
$ sudo docker build -t potato . --build-arg VERSION=1 --build-arg JAR_PATH=/build/libs/AerariumBackend.jar

Run a container from the created image
$ docker run --name nicholas -itd -p 5000:8080 potato

Utilities ---------------------------------------------------

If you already got a postgres instance on your computer
you can use the following comand to stop it's exection
and release the network port usage:
$ sudo /etc/init.d/postgresql stop

The following commands will connect into a docker container
instance and access the database functionality:
$ sudo docker exec -it <container_name> bash
$ psql <dbname> <username>

Start docker application on a recently started instance:
$ sudo dservice docker start

Connect to the productive database instance:
$ psql --host=aerarium-db.cggcgu4rl6aw.sa-east-1.rds.amazonaws.com --port=5432 --username=postgres --password --dbname=aerarium

Give permission to Key pair generated for the EC2 instance (before SSH connection)
$ chmod 400 mykey.pem

Search images from specific users at the Dockerhub:
$ docker search nickchecan

Pull image from the Dockerhub:
$ docker pull nickchecan

Run docker image at the EC2 instance:
$ docker run -d -p 80:8080 nickchecan/aerarium

Check container execution logs:
$ docker logs <container_id>

Docker User Permission --------------------------------------
$ sudo groupadd docker
$ sudo usermod -aG docker $USER

On the database instance (postgres) -------------------------

List the database tables and their respective owners:
$ \dt

List all of the tables, views, and sequences in the database:
$ \z

Quit database cli:
\q

Dockerhub Integration ---------------------------------------

For Travis CI Dockerhub integration, remember to set the following environment variables:
DOCKER_PASSWORD - Dockerhub password
DOCKER_USERNAME - Dockerhub username

AWS ECR Integration -----------------------------------------

For Travis CI AWS ECR, remember to set the following environment variables:
AWS_ACCESS_KEY_ID - Second key value of the credentials file retrieved through the user created at the AWS IAM tool
AWS_DEFAULT_REGION - AWS region (Exaple: sa-east-1)
AWS_SECRET_ACCESS_KEY - First key value of the credentials file retrieved through the user created at the AWS IAM tool
IMAGE_REPO_URL - Repository image URI without ":latest" part